# Generated by Django 5.2.1 on 2025-05-23 00:50

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('menu', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StockItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name of the item', max_length=255, unique=True, verbose_name='Name')),
                ('unit', models.CharField(help_text='Measurement unit (e.g., kg, lb, units)', max_length=10, verbose_name='Unit of Measurement')),
                ('category', models.CharField(choices=[('INGREDIENT', 'Ingredient'), ('UTENSIL', 'Utensil'), ('CONTAINER', 'Container'), ('OTHER', 'Other')], default='OTHER', help_text='Classification of the stock item', max_length=15, verbose_name='Category')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('menu_item', models.ForeignKey(blank=True, help_text='Associated menu item (for ingredients only)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_items', to='menu.menuitem', verbose_name='Menu Item')),
            ],
            options={
                'verbose_name': 'Stock Item',
                'verbose_name_plural': 'Stock Items',
                'db_table': 'stock_items',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_stock', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0, 'Stock cannot be negative'), django.core.validators.MaxValueValidator(1000000, 'Stock cannot exceed 1,000,000')], verbose_name='Current Stock')),
                ('optimal_stock_quantity', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1, 'Optimal stock must be at least 1'), django.core.validators.MaxValueValidator(1000000, 'Optimal stock cannot exceed 1,000,000')], verbose_name='Optimal Quantity')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='stocks', to='stock.stockitem', verbose_name='Stock Item')),
            ],
            options={
                'verbose_name': 'Inventory',
                'verbose_name_plural': 'Inventories',
                'db_table': 'stocks',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='StockTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, 'Quantity must be at least 1'), django.core.validators.MaxValueValidator(10000, 'Quantity cannot exceed 10,000')], verbose_name='Quantity')),
                ('transaction_type', models.CharField(choices=[('IN', 'Stock In'), ('OUT', 'Stock Out')], max_length=3, verbose_name='Type')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Transaction Date')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Expiration Date')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('employee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_transactions', to=settings.AUTH_USER_MODEL, verbose_name='Processed By')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='stock.stock', verbose_name='Inventory')),
            ],
            options={
                'verbose_name': 'Inventory Transaction',
                'verbose_name_plural': 'Inventory Transactions',
                'db_table': 'stock_transactions',
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.AddConstraint(
            model_name='stockitem',
            constraint=models.UniqueConstraint(fields=('name',), name='unique_stock_item_name'),
        ),
        migrations.AddConstraint(
            model_name='stockitem',
            constraint=models.CheckConstraint(condition=models.Q(('unit__isnull', False), models.Q(('unit', ''), _negated=True)), name='non_empty_unit'),
        ),
        migrations.AddConstraint(
            model_name='stock',
            constraint=models.CheckConstraint(condition=models.Q(('total_stock__gte', 0)), name='non_negative_stock'),
        ),
        migrations.AddConstraint(
            model_name='stock',
            constraint=models.CheckConstraint(condition=models.Q(('optimal_stock_quantity__gte', 1)), name='minimum_optimal_stock'),
        ),
        migrations.AddConstraint(
            model_name='stock',
            constraint=models.UniqueConstraint(fields=('item',), name='unique_item_inventory'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['transaction_type'], name='stock_trans_transac_b2b788_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['date'], name='stock_trans_date_ab212b_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['stock', 'date'], name='stock_trans_stock_i_35c4f8_idx'),
        ),
    ]
