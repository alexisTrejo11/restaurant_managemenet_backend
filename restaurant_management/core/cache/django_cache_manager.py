from django.core.cache import cache
from typing import Dict, List, Any

class CacheManager:
    """
    A utility class for managing caching operations using Django's cache framework.
    
    This class provides methods to interact with the cache system, including setting, 
    getting, and deleting cache entries. It also supports generating cache keys and 
    handling bulk operations.
    """

    def __init__(self, cache_prefix: str):
        """
        Initialize the CacheManager with a cache prefix.
        
        Args:
            cache_prefix (str): A string prefix used to namespace cache keys.
        """
        self.cache_prefix = cache_prefix

    CACHE_TIMEOUT = 60 * 15  # Default timeout of 15 minutes

    def get_cache_key(self, id: int) -> str:
        """
        Generate a namespaced cache key by combining the cache prefix and the given ID.
        
        Args:
            id (int): The unique identifier for the cache entry.
        
        Returns:
            str: A namespaced cache key in the format "<cache_prefix><id>".
        """
        return f"{self.cache_prefix}{id}"

    def get(self, key: str) -> Any:
        """
        Retrieve a value from the cache using the specified key.
        
        Args:
            key (str): The cache key to retrieve the value for.
        
        Returns:
            Any: The cached value if it exists, or None if the key is not found.
        """
        return cache.get(key)

    def set(self, key: str, value: Any, timeout: int = None):
        """
        Store a value in the cache with the specified key and optional timeout.
        
        Args:
            key (str): The cache key to store the value under.
            value (Any): The value to store in the cache.
            timeout (int, optional): The expiration time for the cache entry in seconds. 
                                     Defaults to `CACHE_TIMEOUT` if not provided.
        """
        cache.set(key, value, timeout or self.CACHE_TIMEOUT)

    def set_multi(self, data: Dict[str, Any], timeout: int = None):
        """
        Store multiple key-value pairs in the cache with an optional timeout.
        
        Args:
            data (Dict[str, Any]): A dictionary of key-value pairs to store in the cache.
            timeout (int, optional): The expiration time for the cache entries in seconds. 
                                     Defaults to `CACHE_TIMEOUT` if not provided.
        """
        cache.set_many(data, timeout or self.CACHE_TIMEOUT)

    def delete(self, key: str):
        """
        Delete a single cache entry by its key.
        
        Args:
            key (str): The cache key to delete.
        """
        cache.delete(key)

    def delete_multi(self, keys: List[str]):
        """
        Delete multiple cache entries by their keys.
        
        Args:
            keys (List[str]): A list of cache keys to delete.
        """
        cache.delete_many(keys)

    def generate_search_key(self, filters: dict) -> str:
        """
        Generate a unique cache key for a search query based on the provided filters.
        
        The key is generated by hashing the sorted, immutable representation of the filters.
        
        Args:
            filters (dict): A dictionary of filter parameters for the search query.
        
        Returns:
            str: A unique cache key prefixed with "search_" and based on the hash of the filters.
        """
        return f"search_{hash(frozenset(filters.items()))}"